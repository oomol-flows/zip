inputs_def:
  - handle: zip_path
    description: "Path to ZIP file to validate"
    json_schema:
      type: string
      ui:
        widget: file
        ui:options:
          filters:
            - name: ZIP Archive
              extensions:
                - zip
          excludeAll: true
    nullable: false

  - handle: password
    description: "Password if ZIP is encrypted (optional)"
    json_schema:

      type: string
    nullable: true

  - handle: test_extraction
    description: "Test actual extraction of files"
    json_schema:
      type: boolean
    value: false
    nullable: false

  - handle: check_crc
    description: "Verify CRC checksums of all files"
    json_schema:
      type: boolean
    value: true
    nullable: false

  - handle: max_files_to_test
    description: "Maximum files to test (0=all files)"
    json_schema:
      type: integer
      minimum: 0
    value: 100
    nullable: false

outputs_def:
  - handle: is_valid
    description: "Whether the ZIP file is valid"
    json_schema:
      type: boolean

  - handle: validation_summary
    description: "Summary of validation results"
    json_schema:
      type: object

  - handle: tested_files_count
    description: "Number of files tested"
    json_schema:
      type: number

  - handle: corrupted_files
    description: "List of corrupted file names"
    json_schema:
      type: array
      items:
        type: string

  - handle: validation_errors
    description: "List of validation error messages"
    json_schema:
      type: array
      items:
        type: string

  - handle: can_open_archive
    description: "Whether the archive can be opened"
    json_schema:
      type: boolean

executor:
  name: python
  options:
    entry: __init__.py
    spawn: false

title: "Validate ZIP Archive"
icon: ":carbon:checkmark:"
description: "Validate ZIP file integrity, test extraction, and verify checksums"
